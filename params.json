{
  "name": "Drupal-ios-sdk",
  "tagline": "The Drupal iOS SDK provides a full suite of iOS methods to natively connect iOS applications to Drupal 7 and 8.",
  "body": "# Waterwheel Swift SDK - Connect your iOS, macOS, watchOS, tvOS app to Drupal\r\n\r\n##### built by [Kyle Browning](http://kylebrowning.com)\r\n\r\n\r\n## Introduction\r\n\r\nThe Drupal Swift SDK is a standard set of libraries for communicating to Drupal with Swift on any Apple powered device(iOS, macOS, watchOS, tvOS). Its extremely simple, and is basically a wrapper for Alamofire. It combines the most used commands to communicate with Drupal and handles session managment for you.\r\n\r\n## Requirements\r\n\r\n| waterwheel Version | Drupal Version  | Min iOS Target  |                                   Notes                                   |\r\n|:--------------------:|:---------------------------:|:----------------------------:|:-------------------------------------------------------------------------:|\r\n|          [4.x](https://github.com/kylebrowning/waterwheel-swift/tree/4.x)         |            Drupal 8 (Swift)            | iOS 9.0   \r\n|          [3.x](https://github.com/kylebrowning/waterwheel-swift/tree/master)         |            Drupal 8 (Obj-C)            |           iOS 7.0          |  |\r\n|          [2.x](https://github.com/kylebrowning/waterwheel-swift/tree/2.x)         |            Drupal 6-7 (Obj-C)            |         iOS 5.0        |        Requires [Services](http://drupal.org/project/services) module                                                                    |\r\n\r\n## Philosophy and Purpose\r\nAt its core the Waterwheel Swift SDK is designed to handle everything Drupal Core supports out of the box. Since 8.x is in its infancy, more and more features will come available as Drupal aims to improve its API capabilities.\r\n\r\n## Current 4.x features\r\n- Session management\r\n- Entity CRUD\r\n\r\n## Future\r\nIn the future this project will have more robust features that make working with Drupal from a Swift perspective easier such as:\r\n\r\n- LoginViewController\r\n- SignupViewController\r\n- LogoutButton\r\n- Views integration into Table Views\r\n\r\n##Installation\r\n----\r\nCreate a pod file with (this will keep you on the 4.0 releases which is Drupal 8 specific)\r\n```\r\n pod 'waterwheel', '~> 4.0'\r\n```\r\nThen run\r\n```\r\npod install\r\n```\r\n\r\n##Configuration\r\n\r\n1. `import waterwheel`\r\n2. (Optional) If you're not using HTTPS you will have to enable the [NSAppTransportSecurity](http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http)\r\n\r\n\r\n##Initialization Steps\r\n\r\nThe code below will give you access to the baseline of features for communicating to a Drupal site.\r\n```swift\r\n// Create an instance to use.\r\nlet waterwheelEm = waterwheel.sharedInstance\r\n// set the URL\r\nwaterwheelEm.URL = \"http://drupal-8-dev.dd\"\r\n```\r\n\r\nThis will log you into the site.\r\n```swift\r\n//set Username and password\r\nwaterwheel.setUserNameAndPassword(\"kylebrowning\", password: \"password\")\r\n```\r\n\r\n## Entity Requests\r\n\r\n```swift\r\n//we need an entity manager instance\r\nlet em = waterwheelEntity()\r\n```\r\n\r\n### Get\r\n\r\n```swift\r\nlet em = waterwheelEntity()\r\n\r\n//Get Node 36\r\nem.get(\"node\", entityId: \"36\") { (success, response, json, error) in\r\n    if (success) {\r\n        print(json)\r\n    } else {\r\n        print(error)\r\n    }\r\n}\r\n```\r\n\r\n### Create/post\r\n\r\n```swift\r\n//build our node body\r\nlet body = [\r\n    \"type\": [\r\n        [\r\n            \"target_id\": \"article\"\r\n        ]\r\n    ],\r\n    \"title\": [\r\n        [\r\n            \"value\": \"Hello World\"\r\n        ]\r\n    ],\r\n    \"body\": [\r\n        [\r\n            \"value\": \"How are you?\"\r\n        ]\r\n    ]\r\n]\r\n\r\n//Create a new node.\r\nem.post(\"node\", params: body) { (success, response, json, error) in\r\n    if (success) {\r\n        print(response)\r\n    } else {\r\n        print(error)\r\n    }\r\n}\r\n ```\r\n\r\n### Update/Put/PATCH\r\n\r\n```swift\r\n//Update an existing node\r\nem.patch(\"node\", entityId: \"36\", params: body) { (success, response, json, error) in\r\n    if (success) {\r\n        //Extra error checking, but its not needed\r\n        if (response!.response?.statusCode == 201) {\r\n            print(json)\r\n        }\r\n    } else {\r\n        print(error)\r\n    }\r\n}\r\n```\r\n\r\n### Delete\r\n```swift\r\n//Delete an existing node\r\nem.delete(\"node\", entityId: \"26\") { (success, response, json, error) in\r\n    if (success) {\r\n        print(response)\r\n    } else {\r\n        print(error)\r\n    }\r\n}\r\n```\r\n",
  "google": "UA-3203637-9",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}