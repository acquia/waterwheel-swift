{
  "name": "Waterwheel",
  "tagline": "The Waterwheel Swift SDK provides a way to natively connect iOS, macOS, tvOS, and watchOS applications to Drupal 7 and 8.",
  "body": "\r\n![Waterwheel - Drupal SDK](https://raw.githubusercontent.com/acquia/waterwheel-swift/assets/waterwheel.png)\r\n\r\n<p align='right'>\r\n[![Drupal version](https://img.shields.io/badge/Drupal-8-blue.svg)]()\r\n[![CocoaPods](https://img.shields.io/cocoapods/v/waterwheel.svg?maxAge=86000)]()\r\n[![CocoaPods](https://img.shields.io/badge/platform-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS-green.svg)](#)\r\n<br clear='all'/>\r\n\r\n## Introduction\r\n\r\nThe Waterwheel Swift SDK is a set of methods and classes making it easier to use Drupal with Swift on any Apple powered device (iOS, macOS, watchOS, tvOS). It combines the most used commands to communicate with Drupal, gives you commons Views and tasks for Drupal apps, and handles all session management for you. \r\n\r\nThe framework is tracking Drupal 8. As new features come out in 8, they will be added ASAP. Since Drupal 7 and Drupal 8 are completely different in terms of API's, you will need to use the correct version of waterwheel depending on your Drupal version.\r\n\r\n## Requirements\r\n- iOS 8.0+ / Mac OS X 10.9+ / tvOS 9.0+ / watchOS 2.0+\r\n- Xcode 7.3+\r\n\r\n| waterwheel version | Drupal version   |                                   Notes                                   |\r\n|:--------------------:|:---------------------------:|:----------------------------:|:-------------------------------------------------------------------------:|\r\n|          [4.x](https://github.com/kylebrowning/waterwheel-swift/tree/4.x)         |            Drupal 8 (Swift)            | \r\n|          [3.x](https://github.com/kylebrowning/waterwheel-swift/tree/3.x)         |            Drupal 8 (Obj-C)                   |  |\r\n|          [2.x](https://github.com/kylebrowning/waterwheel-swift/tree/2.x)         |            Drupal 6-7 (Obj-C)              |        Requires [Services](http://drupal.org/project/services) module                                                                    |\r\n## Features in 4.x\r\n- [x] Session management\r\n- [x] Basic Auth\r\n- [x] Cookie Auth\r\n- [x] Entity CRUD\r\n- [ ] True entities\r\n- [ ] Local caching\r\n- [ ] LoginViewController\r\n- [ ] SignupViewController\r\n- [ ] LogoutButton\r\n- [ ] Views integration into Table Views\r\n\r\n## Communication\r\n\r\n- If you **need help**, use [Stack Overflow](http://stackoverflow.com/questions/tagged/waterwheel-swift). (Tag 'waterwheel-swift')\r\n- If you **found a bug**, open an issue.\r\n- If you **have a feature request**, open an issue.\r\n- If you **want to contribute**, submit a pull request.\r\n\r\n##Installation\r\n\r\nWaterwheel offers two installations paths. Pick your poison!\r\n\r\n### CocoaPods\r\n\r\n[CocoaPods](http://cocoapods.org) is a dependency manager for Cocoa projects. You can install it with the following command:\r\n\r\n```bash\r\n$ gem install cocoapods\r\n```\r\n\r\n> CocoaPods 0.39.0+ is required to build Waterwheel 3.0.0+.\r\n\r\nTo integrate Waterwheel into your Xcode project using CocoaPods, specify it in your `Podfile`:\r\n\r\n```ruby\r\nsource 'https://github.com/CocoaPods/Specs.git'\r\nplatform :ios, '9.0'\r\nuse_frameworks!\r\n\r\ntarget '<Your Target Name>' do\r\n    pod 'waterwheel', '~> 4.2'\r\nend\r\n```\r\n\r\nThen, run the following command:\r\n\r\n```bash\r\n$ pod install\r\n```\r\n\r\n### Carthage\r\n\r\n[Carthage](https://github.com/Carthage/Carthage) is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.\r\n\r\nYou can install Carthage with [Homebrew](http://brew.sh/) using the following command:\r\n\r\n```bash\r\n$ brew update\r\n$ brew install carthage\r\n```\r\n\r\nTo integrate Waterwheel into your Xcode project using Carthage, specify it in your `Cartfile`:\r\n\r\n```ogdl\r\ngithub \"acquia/waterwheel-swift\" ~> 4.2\r\n```\r\n\r\nRun `carthage update` to build the framework and drag the built `waterwheel.framework` into your Xcode project.\r\n\r\n##Configuration\r\n\r\n1. `import waterwheel`\r\n2. (Optional) If you're not using HTTPS you will have to enable the [NSAppTransportSecurity](http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http)\r\n\r\n\r\n## Using Waterwheel\r\n\r\nThe code below will give you access to the baseline of features for communicating to a Drupal site.\r\n```swift\r\n// Create an instance to use.\r\nlet waterwheelEm = waterwheel.sharedInstance\r\n// Sets the URL to your Drupal site.\r\nwaterwheelEm.URL = \"http://drupal-8-dev.dd\"\r\n```\r\n\r\nThe code below will set up Basic Authentication for each API call.\r\n```swift\r\n// Sets HTTPS Basic Authentication Credentials.\r\nwaterwheelEm.setBasicAuthUsernameAndPassword(\"test\", password: \"test2\");\r\n```\r\n\r\n### Entity Requests\r\n\r\n```swift\r\n// We need an entity manager instance\r\nlet em = waterwheelEntity()\r\n```\r\n\r\n### Get\r\n\r\n```swift\r\nlet em = waterwheelEntity()\r\n\r\n//Get Node 36\r\nem.get(\"node\", entityId: \"36\") { (success, response, json, error) in\r\n    if (success) {\r\n        print(json)\r\n    } else {\r\n        print(error)\r\n    }\r\n}\r\n```\r\n\r\n### Create/post\r\n\r\n```swift\r\n//build our node body\r\nlet body = [\r\n    \"type\": [\r\n        [\r\n            \"target_id\": \"article\"\r\n        ]\r\n    ],\r\n    \"title\": [\r\n        [\r\n            \"value\": \"Hello World\"\r\n        ]\r\n    ],\r\n    \"body\": [\r\n        [\r\n            \"value\": \"How are you?\"\r\n        ]\r\n    ]\r\n]\r\n\r\n//Create a new node.\r\nem.post(\"node\", params: body) { (success, response, json, error) in\r\n    if (success) {\r\n        print(response)\r\n    } else {\r\n        print(error)\r\n    }\r\n}\r\n ```\r\n\r\n### Update/Put/PATCH\r\n\r\n```swift\r\n//Update an existing node\r\nem.patch(\"node\", entityId: \"36\", params: body) { (success, response, json, error) in\r\n    if (success) {\r\n        //Extra error checking, but its not needed\r\n        if (response!.response?.statusCode == 201) {\r\n            print(json)\r\n        }\r\n    } else {\r\n        print(error)\r\n    }\r\n}\r\n```\r\n\r\n### Delete\r\n```swift\r\n//Delete an existing node\r\nem.delete(\"node\", entityId: \"26\") { (success, response, json, error) in\r\n    if (success) {\r\n        print(response)\r\n    } else {\r\n        print(error)\r\n    }\r\n}\r\n```\r\n",
  "google": "UA-3203637-9",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}