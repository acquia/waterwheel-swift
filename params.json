{
  "name": "Waterwheel",
  "tagline": "The Waterwheel Swift SDK provides a way to natively connect iOS, macOS, tvOS, and watchOS applications to Drupal 7 and 8.",
  "body": "\r\n![Waterwheel - Drupal SDK](https://raw.githubusercontent.com/acquia/waterwheel-swift/assets/waterwheel.png)\r\n\r\n[![Drupal version](https://img.shields.io/badge/Drupal-8-blue.svg)]()\r\n[![CocoaPods](https://img.shields.io/badge/platform-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS-green.svg)](#)\r\n[![CocoaPods](https://img.shields.io/cocoapods/v/waterwheel.svg?maxAge=43000)]()\r\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](#carthage)\r\n![Swift version](https://img.shields.io/badge/swift-2.2%20|%202.3-orange.svg)\r\n\r\n#### Waterwheel Swift SDK for `Drupal`\r\n###### Waterwheel makes using Drupal as a backend with iOS, macOS, tvOS, or watchOS enjoyable by combining the most used features of Drupal's API's in one SDK. - Formerly known as Drupal iOS SDK.\r\n\r\n\r\n-------\r\n<p align=\"center\">\r\n    <a href=\"#features-in-4x\">Features</a> &bull;\r\n    <a href=\"#configuration\">Configuration</a> &bull;\r\n    <a href=\"#usage\">Usage</a> &bull;\r\n    <a href=\"#installation\">Installation</a> &bull;\r\n    <a href=\"#requirements\">Requirements</a>\r\n</p>\r\n-------\r\n\r\n## Features in 4.x\r\n- [x] Session management\r\n- [x] Basic Auth\r\n- [x] Cookie Auth\r\n- [x] Entity CRUD\r\n- [ ] True entities\r\n- [ ] Local caching\r\n- [x] LoginViewController\r\n- [ ] SignupViewController\r\n- [x] AuthButton\r\n- [ ] Views integration into Table Views\r\n\r\n<a href=\"#\">Back to Top</a>\r\n\r\n## Configuration\r\n\r\n1. `import waterwheel`\r\n2. (Optional) If you're not using HTTPS you will have to enable the [NSAppTransportSecurity](http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http)\r\n\r\n\r\n## Usage\r\n\r\nThe code below will give you access to the baseline of features for communicating to a Drupal site.\r\n```swift\r\n// Sets the URL to your Drupal site.\r\nwaterwheel.setDrupalURL(\"http://drupal-8-2-0-beta1.dd\")\r\n```\r\n\r\nIf is important to note that waterwheel makes heavy uses of [Closures](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html), which allows us to pass functions as returns, or store them in variables.\r\n\r\n#### Login \r\n\r\nThe code below will set up Basic Authentication for each API call.\r\n```swift\r\n// Sets HTTPS Basic Authentication Credentials.\r\nwaterwheel.setBasicAuthUsernameAndPassword(\"test\", password: \"test2\");\r\n```\r\n\r\nIf you do not want to use Basic Auth, and instead use a cookie, waterwheel provides an authentication method for doing so.\r\nSessions are handled for you, and will restore state upon closing an app and reopening it.\r\n```swift\r\nwaterwheel.login(usernameField.text!, password: passwordField.text!) { (success, response, json, error) in\r\n    if (success) {\r\n        print(\"logged in\")\r\n    } else {\r\n        print(\"failed to login\")\r\n    }\r\n    self.loginRequestCompleted(success: success, error: error)\r\n}\r\n```\r\n\r\nWaterwheel  provides a button to place anywhere in your app. The code below is iOS specific because of its dependence on UIKit. \r\n\r\n```swift\r\nlet loginButton = waterwheelAuthButton()\r\n// When we press Login, lets show our Login view controller.\r\nloginButton.didPressLogin = {\r\n    let vc = waterwheelLoginViewController()\r\n    // Lets Present our Login View Controller since this closure is for the loginButton press\r\n    self.presentViewController(vc, animated: true, completion: nil)\r\n}\r\n\r\nloginButton.didPressLogout = { (success, error) in\r\n    print(\"logged out\")\r\n}\r\nself.view.addSubview(loginButton)\r\n```\r\n\r\nTaking this one step furthure, waterwheel also provides a LoginViewController. You can subclass this controller and overwrite it however you want. For our purposes we will use the default implementation.\r\n\r\n```swift\r\nlet loginButton = waterwheelAuthButton()\r\n// When we press Login, lets show our Login view controller.\r\nloginButton.didPressLogin = {\r\n    // Lets build our default waterwheelLoginViewController.\r\n    let vc = waterwheelLoginViewController()\r\n    //Lets add our function that will be run when the request is completed.\r\n    vc.loginRequestCompleted = { (success, error) in\r\n        if (success) {\r\n            // Do something related to a successfull login\r\n            print(\"successfull login\")\r\n            self.dismissViewControllerAnimated(true, completion: nil)\r\n        } else {\r\n            print (error)\r\n        }\r\n    }\r\n    vc.logoutRequestCompleted = { (success, error) in\r\n        if (success) {\r\n            print(\"successfull logout\")\r\n            // Do something related to a successfull logout\r\n            self.dismissViewControllerAnimated(true, completion: nil)\r\n        } else {\r\n            print (error)\r\n        }\r\n    }\r\n    // Lets Present our Login View Controller since this closure is for the loginButton press\r\n    self.presentViewController(vc, animated: true, completion: nil)\r\n}\r\n\r\nloginButton.didPressLogout = { (success, error) in\r\n    print(\"logged out\")\r\n}\r\nself.view.addSubview(loginButton)\r\n\r\n```\r\n\r\nBecause these two items know whether you are logged in or out, they will always show the correct state of buttons. The UI is up to you, but at its default you get username, password and submit button.\r\n\r\n\r\n### Node Methods\r\n\r\n\r\n#### Get\r\n\r\n```swift\r\n// Get Node 36\r\nwaterwheel.nodeGet(nodeId: \"36\", params: nil, completionHandler: { (success, response, json, error) in\r\n  print(response)\r\n})\r\n```\r\n\r\n#### Create/post\r\n\r\n```swift\r\n//build our node body\r\nlet body = [\r\n    \"type\": [\r\n        [\r\n            \"target_id\": \"article\"\r\n        ]\r\n    ],\r\n    \"title\": [\r\n        [\r\n            \"value\": \"Hello World\"\r\n        ]\r\n    ],\r\n    \"body\": [\r\n        [\r\n            \"value\": \"How are you?\"\r\n        ]\r\n    ]\r\n]\r\n\r\n// Create a new node.\r\nwaterwheel.entityPost(entityType: .Node, params: body) { (success, response, json, error) in\r\n    if (success) {\r\n        print(response)\r\n    } else {\r\n        print(error)\r\n    }\r\n}\r\n ```\r\n\r\n#### Update/Put/PATCH\r\n\r\n```swift\r\n// Update an existing node\r\nwaterwheel.nodePatch(nodeId: \"36\", node: body) { (success, response, json, error) in\r\n    print(response);\r\n}\r\n```\r\n\r\n#### Delete\r\n```swift\r\n// Delete an existing node\r\nwaterwheel.nodeDelete(nodeId: \"36\", params: nil, completionHandler: { (success, response, json, error) in\r\n    print(response)\r\n})\r\n```\r\n\r\n## Entity Requests\r\nSince Node is rather specific, Watherweel provides entity methods as well for all entityTypes\r\n\r\n#### Entity Get\r\n\r\n```swift\r\nwaterwheel.entityGet(entityType: .Node, entityId: \"36\", params: params, completionHandler: completionHandler)\r\n```\r\n\r\n#### Entity Post\r\n\r\n```swift\r\nwaterwheel.sharedInstance.entityPost(entityType: .Node, params: node, completionHandler: completionHandler)\r\n```\r\n\r\n### Entity Patch\r\n\r\n```swift\r\nwaterwheel.entityPatch(entityType: .Node, entityId: \"36\", params: nodeObject, completionHandler: completionHandler)\r\n```\r\n\r\n#### Entity Delete\r\n\r\n```swift\r\nwaterwheel.entityDelete(entityType: .Node, entityId: entityId, params: params, completionHandler: completionHandler)\r\n```\r\n## Installation\r\n\r\nWaterwheel offers two installations paths. Pick your poison!\r\n\r\n## Installation\r\n\r\n#### CocoaPods\r\n\r\nIf you're using CocoaPods, just add this line to your Podfile:\r\n\r\n```ruby\r\npod 'waterwheel'\r\n```\r\n\r\nInstall by running this command in your terminal:\r\n\r\n```sh\r\npod install\r\n```\r\n\r\nThen import the library in all files where you use it:\r\n\r\n```swift\r\nimport waterwheel\r\n```\r\n\r\n#### Carthage\r\n\r\nJust add to your Cartfile:\r\n\r\n```ruby\r\ngithub \"acquia/waterwheel-swift\"\r\n```\r\nRun `carthage update` to build the framework and drag the built `waterwheel.framework` into your Xcode project.\r\n\r\n## Communication\r\n\r\n- If you **need help**, use [Stack Overflow](http://stackoverflow.com/questions/tagged/waterwheel-swift). (Tag 'waterwheel-swift')\r\n- If you **found a bug**, open an issue.\r\n- If you **have a feature request**, open an issue.\r\n- If you **want to contribute**, submit a pull request.\r\n\r\n<a href=\"#\">Back to Top</a>\r\n\r\n\r\n\r\n## Drupal Compatibility\r\n\r\n#### The framework is tracking Drupal 8. As new features come out in 8, they will be added ASAP. Since Drupal 7 and Drupal 8 are completely different in terms of API's, you will need to use the correct version of waterwheel depending on your Drupal version.\r\n\r\n\r\n\r\n## Requirements\r\n- iOS 8.0+ / Mac OS X 10.9+ / tvOS 9.0+ / watchOS 2.0+\r\n- Xcode 7.3+\r\n\r\n| waterwheel version | Drupal version   |                                   Notes                                   |\r\n|:--------------------:|:---------------------------:|:----------------------------:|:-------------------------------------------------------------------------:|\r\n|          [4.x](https://github.com/kylebrowning/waterwheel-swift/tree/4.x)         |            Drupal 8 (Swift)            | \r\n|          [3.x](https://github.com/kylebrowning/waterwheel-swift/tree/3.x)         |            Drupal 8 (Obj-C)                   |  |\r\n|          [2.x](https://github.com/kylebrowning/waterwheel-swift/tree/2.x)         |            Drupal 6-7 (Obj-C)              |        Requires [Services](http://drupal.org/project/services) module                                                                    |\r\n\r\n<a href=\"#\">Back to Top</a>\r\n",
  "google": "UA-3203637-9",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}